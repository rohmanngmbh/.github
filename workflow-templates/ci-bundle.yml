#######################################################
# This is the main CI workflow build/test/deploy
# for <template> bundle
#######################################################
# - The workflow creates a bundle
# - Test the update with hil-system
# - Deploys the bundle
#######################################################
name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events
  #push:
  #pull_request:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      trigger:
        description: 'Trigger (e.g. manual, ...)'     
        required: true
        default: 'manual'
      update-submodules:
        description: 'Auto-update-submodules (true or false)'     
        required: true
        default: 'false'
      deploy:
        description: 'Auto-deploy (true or false)'     
        required: true
        default: 'false'
      alt_ref:
        description: 'Alternative reference: branch or tag (empty = default-branch)'     
        required: false
        default: ''

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Show trigger info and check input
  Trigger:
    name: Trigger ${{github.event.inputs.trigger}} on ${{github.ref}}

    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Show trigger information
      - name: Show trigger information
        run: |
            echo "Trigger: ${{github.event.inputs.trigger}}"
            echo "Reference: ${{github.ref}}"
            echo "SHA: ${{github.sha}}"
            echo "Actor: ${{github.actor}}"
            echo "Auto-update-submodules: ${{github.event.inputs.update-submodules}}"
            echo "Auto-deploy: ${{github.event.inputs.deploy}}"
            echo "Alternative-reference: ${{github.event.inputs.alt_ref}}"

      # Check input Auto-update-submodules
      - name: Check input Auto-update-submodules
        if: ${{github.event.inputs.update-submodules != 'true' && github.event.inputs.update-submodules != 'false'}}
        run: |
            echo Wrong input on Auto-update-submodules "${{github.event.inputs.update-submodules}}"
            exit 1
      
      # Check input Auto-deploy
      - name: Check input Auto-deploy
        if: ${{ github.event.inputs.deploy != 'true' && github.event.inputs.deploy != 'false'}}
        run: |
            echo "Wrong input on Auto-deploy "${{github.event.inputs.deploy}}"
            exit 1

  # Update submodules
  Update:
    # run only when trigger is passed
    needs: Trigger
    # run if Auto-update-submodules is active
    if: ${{github.event.inputs.update-submodules == 'true'}}

    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checksout action repository and submodules under $GITHUB_WORKSPACE
      # (workaround till submodules are availible for private organzisation use)
      - name: Checkout action with submodules
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.CI_PAT_FOR_CHECKOUT_SUBMODULES }} # is a secret that contains our PAT
          repository: rohmanngmbh/action-update-submodules
          submodules: recursive

      # Run update submodules using action
      - name: Update submodule
        uses: ./
        with:
          token: ${{ secrets.CI_PAT_FOR_UPDATE_SUBMODULES }} # is a secret that contains our PAT
          alt_ref: ${{github.event.inputs.alt_ref}}

  # Create a bundle (see rohmanngmbh/ee-maxwell-usb-update-bundling-tool)
  Build:
	# run if >Update< is 'passed' or 'skipped'
    needs: Update
    if: ${{always() && (needs.Update.result == 'skipped' || needs.Update.result == 'success')}}
  
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

	# Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out repository and submodules under $GITHUB_WORKSPACE
      - name: Checkout with submodules
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.CI_PAT_FOR_CHECKOUT_SUBMODULES }} # is a secret that contains our PAT
          ref: ${{ github.ref }} # take head of branch
          submodules: recursive
    
      # Checks-out bundling-tool repository under $GITHUB_WORKSPACE without submodules
      - name: Checkout bundling-tool
        uses: actions/checkout@v2
        with:
          repository: rohmanngmbh/ee-maxwell-usb-update-bundling-tool
          token: ${{ secrets.CI_PAT_FOR_CHECKOUT_SUBMODULES }} # is a secret that contains our PAT
          path: usb-update-bundling-tool

      # Run tool
      # - delete old stuff
      # - change into working dir
      # - change access rights for the script
      # - run script (script creates a output folder)
      - name: Run tool
        run: |
            rm -rf /output
            cd usb-update-bundling-tool/v2_0/LINUX/
            chmod +x generate_update_bundle.sh
            ./generate_update_bundle.sh ../../../pl600

      # Upload files
      - name: Upload files
        uses: actions/upload-artifact@v2
        with:
          name: <template>-bundle
          path: output
          if-no-files-found: error

  # Test on hil-system
  Test:
    # ensure that only a single run or job is in progress on hil-system-1
    concurrency: hil1
    
    # run only when build is passed
    needs: Build
    # run if >Update< is 'passed' or 'skipped'    
    if: ${{always() && (needs.Update.result == 'skipped' || needs.Update.result == 'success')}}

    # The type of runner that the job will run on: a local runner
    runs-on: [self-hosted, hil-system-1]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # # Clean-up: Delete folders / necessary for next run if previous run failed
      # - name: Clean-up folder
      #   if: ${{ always() }}
      #   run: | 
      #     rm -rf ${{ github.workspace }}/*

      # Checks-out hil-system (without submodules)
      - name: Checkout hil-system
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.CI_PAT_FOR_CHECKOUT_SUBMODULES }} # is a secret that contains our PAT
          repository: rohmanngmbh/ee-python-hil
          #submodules: recursive # necessary for pyroh

      # Checks-out hil-system: pyroh
      - name: Checkout pyroh
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.CI_PAT_FOR_CHECKOUT_SUBMODULES }} # is a secret that contains our PAT
          repository: rohmanngmbh/ee-pyroh
          path: TestingSystem/Interface/EC600_pyroh

      # # Delete folder 'update' and 'downgrade'
      # - name: Delete update and downgrade folder
      #   run: | 
      #     rm -rf update
      #     rm -rf downgrade
    
      # Checks-out repository to folder 'update' 
      - name: Checkout to update folder
        uses: actions/checkout@v2
        with:
          path: update
          ref: ${{ github.ref }} # take head of branch
          
      # Download bundle to folder 'update/output'
      - name: Download bundle files of build job to update folder
        uses: actions/download-artifact@v2
        with:
          name: <template>-bundle
          path: update/output

      # Checks-out repository (default head) to folder 'downgrade' 
      - name: Checkout to downgrade folder
        uses: actions/checkout@v2
        with:
          path: downgrade

      # create and init virtual environment for python and print infos
      - name: Init and activate virtual environment
        run: |
          python3 -m venv ~/venvs/hil
          source ~/venvs/hil/bin/activate
          pip3 install -r requirements.txt
          cat /etc/os-release
          python3 --version
          pip3 list
          deactivate

      # Run python test script in a virtual environment
      - name: Run Test
        run: |
          source ~/venvs/hil/bin/activate
          python3 start_TestSystem.py --default .test/source/cfg_hil1.ini
          deactivate

      # Clean-up and remove virtual environment
      - name: Clean-up virtual environment
        if: ${{ always() }}
        run: |
          python3 -m venv ~/venvs/hil --clear
          rm -rf ~/venvs/hil

      # Upload log files
      - name: Upload log-files
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: logs
          path: Log

      # Upload result files
      - name: Upload result-files
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: results
          path: Result
  
  # Deploy to whatever we want
  Deploy:
    # run only when test is passed
    needs: Test

    # runs only if deploy flag is set
    if: ${{github.event.inputs.deploy == 'true'}} 

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Deploy 
      - name: Deploy
        run: |
          echo 42
